[{"/Users/samlearner/miscellaneous_programming/portfolio_projects/commuter_mapping/src/reportWebVitals.js":"1","/Users/samlearner/miscellaneous_programming/portfolio_projects/commuter_mapping/src/index.js":"2","/Users/samlearner/miscellaneous_programming/portfolio_projects/commuter_mapping/src/components/MapWrapper.js":"3","/Users/samlearner/miscellaneous_programming/portfolio_projects/commuter_mapping/src/d3-components/TractMap.js":"4","/Users/samlearner/miscellaneous_programming/portfolio_projects/commuter_mapping/src/components/Footer.js":"5","/Users/samlearner/miscellaneous_programming/portfolio_projects/commuter_mapping/src/components/Header.js":"6","/Users/samlearner/miscellaneous_programming/portfolio_projects/commuter_mapping/src/components/MapControls.js":"7"},{"size":362,"mtime":1611603679890,"results":"8","hashOfConfig":"9"},{"size":862,"mtime":1611780297207,"results":"10","hashOfConfig":"9"},{"size":879,"mtime":1611787849491,"results":"11","hashOfConfig":"9"},{"size":4631,"mtime":1611788414030,"results":"12","hashOfConfig":"9"},{"size":1211,"mtime":1611779557280,"results":"13","hashOfConfig":"9"},{"size":358,"mtime":1611779333997,"results":"14","hashOfConfig":"9"},{"size":780,"mtime":1611788085983,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xa2rxs",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/samlearner/miscellaneous_programming/portfolio_projects/commuter_mapping/src/reportWebVitals.js",[],"/Users/samlearner/miscellaneous_programming/portfolio_projects/commuter_mapping/src/index.js",[],"/Users/samlearner/miscellaneous_programming/portfolio_projects/commuter_mapping/src/components/MapWrapper.js",["32","33","34"],"/Users/samlearner/miscellaneous_programming/portfolio_projects/commuter_mapping/src/d3-components/TractMap.js",["35"],"import * as d3 from 'd3';\nimport d3Tip from \"d3-tip\"\nimport * as chromatic from \"d3-scale-chromatic\";\nimport * as topojson from \"topojson-client\";\n\n\nclass TractMap {\n\n    containerEl;\n    props;\n\n    constructor(containerEl, props) {\n        this.containerEl = containerEl;\n        const { width, height, tractGeo, stateGeo } = props;\n\n        this.width = width;\n        this.height = height;\n\n        this.svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"viewBox\", [0, 0, width, height]);\n\n        this.setScales();\n\n        this.tractGroup = this.svg.append(\"g\")\n            .attr(\"class\", \"tract-map\");\n            // selectAll(\"path\");\n\n        this.stateGroup = this.svg.append(\"g\")\n            .attr(\"class\", \"state-map\");\n            // .selectAll(\"path\");\n        \n        // Generate background map and projection\n        this.tractGeoJSON = topojson.feature(tractGeo, tractGeo.objects[\"tracts_with_commuter_data\"]);\n        this.stateGeoJSON = topojson.feature(stateGeo, stateGeo.objects.states);\n\n        // this.tractGeoJSON.features = this.tractGeoJSON.features.filter(feature => feature.properties.MSA_ID === \"33860\")\n        // console.log(this.tractGeoJSON)\n\n        // const projection = d3.geoAlbersUsa()\n        //     .fitExtent([[25, 25], [width-25, height-25]], this.tractGeoJSON);\n        \n        // this.generateMap({ geoJSON: this.stateGeoJSON, projection, pathGroup: this.stateGroup, mapType: \"state\" });\n        // this.generateMap({ geoJSON: this.tractGeoJSON, projection, pathGroup: this.tractGroup, mapType: \"tract\" });\n        \n    }\n\n    setScales = () => {\n        this.colorScales =\n            chromatic.schemeCategory10.map((color) => {\n                return d3.scaleLinear()\n                    .domain([0, 1])\n                    .range([\"white\", color])\n            })\n           \n    }\n\n\n    generateMap = ({ geoJSON, projection, pathGroup, mapType }) => {\n        let path = d3.geoPath()\n            .projection(projection);\n\n        \n        pathGroup\n            .selectAll(\"path\")\n            .data( geoJSON.features, d => d.properties.GEOID)\n            .join(\n                enter => enter.append(\"path\")\n                    .attr(\"d\", path)\n                    .attr(\"class\", `${mapType}-path`)\n                    .style(\"opacity\", 1.0)\n                    .style(\"stroke\", \"black\")\n                    .style('stroke-width', mapType === \"state\" ? 0.5 : 0)\n                    // .style(\"fill-opacity\", mapType === \"state\" ? 0 : 1)\n                    // .style(\"fill\", d => {\n                    //     if (mapType === \"state\") {\n                    //         return \"white\";\n                    //     }\n                    //     const scaleIndex = Math.round((parseInt(d.properties.MSA_ID) / 53)) % 10\n                    //     const mainCityCommuterPct = d.properties.total_commuters > 0 ? 1.0*d.properties.main_city_commuters / d.properties.total_commuters : 0.0;\n                    //     return this.colorScales[scaleIndex](mainCityCommuterPct)\n                    // })\n                    .style(\"fill-opacity\", d => {\n                        if (mapType === \"state\") {\n                            return 0;\n                        }\n                        return d.properties.total_commuters > 0 ? 1.0*d.properties.main_city_commuters / d.properties.total_commuters : 0.0;\n                    })\n                    .style(\"fill\", d => {\n                        if (mapType === \"state\") {\n                            return \"white\";\n                        }\n                        const scaleIndex = Math.round((parseInt(d.properties.MSA_ID) / 72)) % 10\n                        return chromatic.schemeCategory10[scaleIndex];\n                    }),\n\n                exit => exit.remove()\n            );\n    };\n\n\n    renderCity = ({ MSA_ID }) => {\n        const vis = this;\n\n        const cityFeatures = vis.tractGeoJSON.features.filter(feature => feature.properties.MSA_ID === MSA_ID)\n        const cityTracts = { type: \"FeatureCollection\", features: cityFeatures };\n\n        const projection = d3.geoAlbersUsa()\n            .fitExtent([[25, 25], [vis.width-25, vis.height-25]], cityTracts);\n        \n        this.generateMap({ geoJSON: cityTracts, projection, pathGroup: vis.tractGroup, mapType: \"tract\" });\n    }\n\n}\n\nexport default TractMap;\n\n\n// \"properties\": {\n//     \"GEOID\": \"01001020100\",\n//     \"MSA\": \"Montgomery, AL\",\n//     \"MSA_ID\": \"33860\",\n//     \"CITY\": \"Prattville\",\n//     \"CITY_ID\": \"0162328\",\n//     \"STATE_ID\": \"01\",\n//     \"COUNTY_ID\": \"001\",\n//     \"total_commuters\": 689,\n//     \"main_city_commuters\": 283\n//   }\n","/Users/samlearner/miscellaneous_programming/portfolio_projects/commuter_mapping/src/components/Footer.js",["36","37","38","39","40","41","42","43"],"import React from 'react';\n\n\nconst Footer = ({ githubLink = \"\"  }) => {\n    return (\n        <div className={\"footer\"}>\n        <hr />\n            <div className=\"footer__section\">\n                <p><strong>Visualization by <a target=\"_blank\" href=\"https://www.samlearner.com\">Sam Learner</a></strong> |&nbsp;\n                    <a target=\"_blank\" href=\"mailto:learnersd@gmail.com\"><img className=\"icon-img\" src=\"/images/email.svg\" /></a> |&nbsp;\n                    <a target=\"_blank\" href=\"https://twitter.com/sam_learner\"><img className=\"icon-img\" src=\"/images/twitter.svg\" /></a> |&nbsp;\n                    <a target=\"_blank\" href=\"https://github.com/sdl60660\"><img className=\"icon-img\" src=\"/images/github.png\" /></a>\n                </p>\n                <p>Code and data for this project lives <a target=\"_blank\" href={githubLink}>here</a>.</p> \n            </div>\n\n            <div className=\"footer__section\">\n                <p><strong>Sources</strong></p>\n            </div>\n            \n            <div className=\"footer__section\">\n                <p><strong>Notes</strong></p>\n            </div>\n\n            <p>Last Updated: January 2021</p>\n        </div>\n    )\n}\n\nexport { Footer as default }","/Users/samlearner/miscellaneous_programming/portfolio_projects/commuter_mapping/src/components/Header.js",[],"/Users/samlearner/miscellaneous_programming/portfolio_projects/commuter_mapping/src/components/MapControls.js",[],{"ruleId":"44","severity":1,"message":"45","line":3,"column":13,"nodeType":"46","messageId":"47","endLine":3,"endColumn":15},{"ruleId":"44","severity":1,"message":"48","line":4,"column":13,"nodeType":"46","messageId":"47","endLine":4,"endColumn":22},{"ruleId":"49","severity":1,"message":"50","line":21,"column":8,"nodeType":"51","endLine":21,"endColumn":10,"suggestions":"52"},{"ruleId":"44","severity":1,"message":"53","line":2,"column":8,"nodeType":"46","messageId":"47","endLine":2,"endColumn":13},{"ruleId":"54","severity":1,"message":"55","line":9,"column":48,"nodeType":"56","endLine":9,"endColumn":63},{"ruleId":"54","severity":1,"message":"55","line":10,"column":24,"nodeType":"56","endLine":10,"endColumn":39},{"ruleId":"57","severity":1,"message":"58","line":10,"column":74,"nodeType":"59","endLine":10,"endColumn":126},{"ruleId":"54","severity":1,"message":"55","line":11,"column":24,"nodeType":"56","endLine":11,"endColumn":39},{"ruleId":"57","severity":1,"message":"58","line":11,"column":79,"nodeType":"59","endLine":11,"endColumn":133},{"ruleId":"54","severity":1,"message":"55","line":12,"column":24,"nodeType":"56","endLine":12,"endColumn":39},{"ruleId":"57","severity":1,"message":"58","line":12,"column":75,"nodeType":"59","endLine":12,"endColumn":128},{"ruleId":"54","severity":1,"message":"55","line":14,"column":60,"nodeType":"56","endLine":14,"endColumn":75},"no-unused-vars","'d3' is defined but never used.","Identifier","unusedVar","'chromatic' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'stateGeo' and 'tractGeo'. Either include them or remove the dependency array.","ArrayExpression",["60"],"'d3Tip' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"61","fix":"62"},"Update the dependencies array to be: [stateGeo, tractGeo]",{"range":"63","text":"64"},[568,570],"[stateGeo, tractGeo]"]